/*
 * This program is a random password generator.
 * Project Name : RandomPasswordGenerator
 * Package name : RandomPasswordGenerator
 * Class name : RandomPasswordGeneratorUI
 * GROUP 2; MACATO && SANTERA && TORREGOZA
 */
package RandomPasswordGenerator;

import java.util.Random;
import java.awt.datatransfer.StringSelection;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;

public class RandomPasswordGeneratorUI extends javax.swing.JFrame {

    //VARIABLES
 

    /**
     * Creates new form RandomPasswordGeneratorClass
     */
    public RandomPasswordGeneratorUI() {
        initComponents();
        
        setDefaultCloseOperation(confirmUI.DISPOSE_ON_CLOSE);
        setDefaultCloseOperation(RandomPasswordGeneratorUI.DISPOSE_ON_CLOSE);
    }
    public String bothChar = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    public String upperChar = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public String lowerChar = "abcdefghijklmnopqrstuvwxyz";
    public String numberChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890";
    public String numberCharSpecial = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*";
    
    private int getRandomUpper(){
        int randomInt = 0;
        Random randomGenerator = new Random();
        randomInt = randomGenerator.nextInt(upperChar.length());
        if(randomInt -1 == -1){
            return randomInt;
        } else {
            return randomInt -1;
        }
    }
    
     private int getRandomLower(){
        int randomInt = 0;
        Random randomGenerator = new Random();
        randomInt = randomGenerator.nextInt(lowerChar.length());
        if(randomInt -1 == -1){
            return randomInt;
        } else {
            return randomInt -1;
        }
    }
        private int getRandomBothUpperLower(){
        int randomInt = 0;
        Random randomGenerator = new Random();
        randomInt = randomGenerator.nextInt(bothChar.length());
        if(randomInt -1 == -1){
            return randomInt;
        } else {
            return randomInt -1;
        }
    }
        private int getRandomNumberChar(){
        int randomInt = 0;
        Random randomGenerator = new Random();
        randomInt = randomGenerator.nextInt(numberChars.length());
        if(randomInt -1 == -1){
            return randomInt;
        } else {
            return randomInt -1;
        }
    }
        private int getRandomNumberCharSpecial(){
        int randomInt = 0;
        Random randomGenerator = new Random();
        randomInt = randomGenerator.nextInt(numberCharSpecial.length());
        if(randomInt -1 == -1){
            return randomInt;
        } else {
            return randomInt -1;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        getLength = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bothButtonABC = new javax.swing.JRadioButton();
        lowercaseButton = new javax.swing.JRadioButton();
        uppercaseButton = new javax.swing.JRadioButton();
        numbersButton = new javax.swing.JRadioButton();
        symbolsButton = new javax.swing.JRadioButton();
        PasswordTextField = new javax.swing.JTextField();
        GeneratePasswordButton = new javax.swing.JButton();
        confirmCopy = new javax.swing.JCheckBox();
        CopyPasswordButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Password Generator");
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 3));

        getLength.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getLength.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 3));
        getLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getLengthActionPerformed(evt);
            }
        });

        jLabel1.setText("Length:");

        jLabel2.setText("Alpha Characters:");

        buttonGroup1.add(bothButtonABC);
        bothButtonABC.setText("Both (aBcD)");
        bothButtonABC.setContentAreaFilled(false);
        bothButtonABC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bothButtonABCActionPerformed(evt);
            }
        });

        buttonGroup1.add(lowercaseButton);
        lowercaseButton.setText("Lowercase (abc)");
        lowercaseButton.setContentAreaFilled(false);
        lowercaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowercaseButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(uppercaseButton);
        uppercaseButton.setText("Uppercase (ABC)");
        uppercaseButton.setContentAreaFilled(false);
        uppercaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uppercaseButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(numbersButton);
        numbersButton.setText("Numbers & aBcD (a1B2c)");
        numbersButton.setContentAreaFilled(false);
        numbersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numbersButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(symbolsButton);
        symbolsButton.setText("Numbers & aBcD & !%$");
        symbolsButton.setContentAreaFilled(false);
        symbolsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                symbolsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getLength, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bothButtonABC, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lowercaseButton))
                                .addGap(69, 69, 69))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(uppercaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(56, 56, 56)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numbersButton)
                            .addComponent(symbolsButton))))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bothButtonABC)
                    .addComponent(numbersButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lowercaseButton)
                    .addComponent(symbolsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(uppercaseButton)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        PasswordTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        PasswordTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 3));
        PasswordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordTextFieldActionPerformed(evt);
            }
        });

        GeneratePasswordButton.setText("Generate Password");
        GeneratePasswordButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));
        GeneratePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneratePasswordButtonActionPerformed(evt);
            }
        });

        confirmCopy.setBackground(new java.awt.Color(255, 255, 255));
        confirmCopy.setText("I have copied this password in a safe place");
        confirmCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmCopyActionPerformed(evt);
            }
        });

        CopyPasswordButton.setBackground(new java.awt.Color(204, 204, 204));
        CopyPasswordButton.setText("Copy Password");
        CopyPasswordButton.setToolTipText("");
        CopyPasswordButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));
        CopyPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyPasswordButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("Exit");
        ExitButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(confirmCopy)
                        .addGap(14, 14, 14)
                        .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CopyPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(PasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(GeneratePasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GeneratePasswordButton)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmCopy)
                    .addComponent(ExitButton)
                    .addComponent(CopyPasswordButton))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void PasswordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordTextFieldActionPerformed

    private void GeneratePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneratePasswordButtonActionPerformed
        int string_length = Integer.parseInt(getLength.getText());
        StringBuilder str = new StringBuilder();
        
     
        if(bothButtonABC.isSelected()){
            for(int i = 0; i < string_length; i++){
            //methodcall
            int num = getRandomBothUpperLower();
            char ch = bothChar.charAt(num);
            str.append(ch);
        }
        PasswordTextField.setText(str.toString());
        }    
        else if(lowercaseButton.isSelected()){
            for(int i = 0; i < string_length; i++){
            //methodcall
            int num = getRandomLower();
            char ch = lowerChar.charAt(num);
            str.append(ch);
        }
        PasswordTextField.setText(str.toString());
        }
        
        else if(uppercaseButton.isSelected()){
            for(int i = 0; i < string_length; i++){
            //methodcall
            int num = getRandomUpper();
            char ch = upperChar.charAt(num);
            str.append(ch);
        }
        PasswordTextField.setText(str.toString());
        }
        
        else if(numbersButton.isSelected()){
            for(int i = 0; i < string_length; i++){
            //methodcall
            int num = getRandomNumberChar();
            char ch = numberChars.charAt(num);
            str.append(ch);
        }
        PasswordTextField.setText(str.toString());
        }
        
        else if(symbolsButton.isSelected()){
            for(int i = 0; i < string_length; i++){
            //methodcall
            int num = getRandomNumberCharSpecial();
            char ch = numberCharSpecial.charAt(num);
            str.append(ch);
        }
        PasswordTextField.setText(str.toString());
        }
        
        
        

    }//GEN-LAST:event_GeneratePasswordButtonActionPerformed

    //CLEAR
    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        PasswordTextField.setText("");
        buttonGroup1.clearSelection();
        buttonGroup2.clearSelection();
    }//GEN-LAST:event_ClearButtonActionPerformed

    //LENGTH TEXT FIELD
    private void getLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getLengthActionPerformed

    }//GEN-LAST:event_getLengthActionPerformed

    private void numbersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numbersButtonActionPerformed

    }//GEN-LAST:event_numbersButtonActionPerformed

    private void symbolsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_symbolsButtonActionPerformed

    }//GEN-LAST:event_symbolsButtonActionPerformed

    //BUTTONS
    private void bothButtonABCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bothButtonABCActionPerformed

    }//GEN-LAST:event_bothButtonABCActionPerformed

    private void lowercaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowercaseButtonActionPerformed

    }//GEN-LAST:event_lowercaseButtonActionPerformed

    private void uppercaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uppercaseButtonActionPerformed

    }//GEN-LAST:event_uppercaseButtonActionPerformed

    private void confirmCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmCopyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_confirmCopyActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        
        confirmUI confirmUIJframe = new confirmUI();
        
        if(confirmCopy.isSelected()){
            System.exit(0);
        } else {
            confirmUIJframe.setVisible(true);
        }
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void CopyPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyPasswordButtonActionPerformed
        StringSelection stringSelection = new StringSelection(PasswordTextField.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_CopyPasswordButtonActionPerformed

    
   //END OF CHECK BOXES

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RandomPasswordGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RandomPasswordGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RandomPasswordGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RandomPasswordGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RandomPasswordGeneratorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearButton;
    private javax.swing.JButton CopyPasswordButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton GeneratePasswordButton;
    private javax.swing.JTextField PasswordTextField;
    private javax.swing.JRadioButton bothButtonABC;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JCheckBox confirmCopy;
    private javax.swing.JTextField getLength;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton lowercaseButton;
    private javax.swing.JRadioButton numbersButton;
    private javax.swing.JRadioButton symbolsButton;
    private javax.swing.JRadioButton uppercaseButton;
    // End of variables declaration//GEN-END:variables
}
